#!/usr/bin/env bash 

#-------------#
# SCRIPT NAME #
#-------------#
name=${0##*/}
Version="0.1.0"

#------------------#
# GENERAL VARIABLE #
#------------------#
declare -A PACKAGES
declare -A options
declare -u CHOICE # make variable upper case

#-------------------#
# CACHE VARIABLES #
#-------------------#
[ "$BAUR_CACHE" ] || BAUR_CACHE="${XDG_CACHE_DIR:-$HOME/.cache}/$name"

#--------------------#
# MAKE CACHE FOLDERS #
#--------------------#
[ -d "$BAUR_CACHE" ] || mkdir -p "$BAUR_CACHE"

#--------------------#
# TEMP FILE VARIALES #
#--------------------#
read SOURCE_TMP< <(mktemp -q /tmp/${name}.XXX)

#--------------#
# EXIT MESSAGE #
#--------------#
die(){
    printf "%s: %b\n" "${name^}" "$@" >&2
    rm -f $SOURCE_TMP 
    exit 2
}

#---------------#
# ERROR MESSAGE #
#---------------#
error(){
    printf "[ERROR]: %b" "$@" >&2
}

#-----------------------#
# CONVERT HTML AMP CHAR #
#-----------------------#
AmpConvert(){
amp_char=( "&quot;" "&amp;" "&#039;" "&lt;" "&gt;" )
nor_char=( '"' '&' "'" '<' '>' )
file="$1"
for line in ${!amp_char[@]}; do
    sed -i "s/${amp_char[$line]}/\\${nor_char[$line]}/g" $file
done

unset amp_char nor_char file
}

#------------------------#
# GET SEARCH INFORMATION #
#------------------------#
GetSearchInfo(){
file="$1"

while read line ; do
    if [[ $line =~ "pkglist-stats" ]] && [ -z "$CONTINUE" ]; then 
        CONTINUE=true
        continue
    fi

    if [ "$CONTINUE" ]; then 
        [ "$line" = "</p>" ] && break
        read resoult < <(sed "s/<[^>]*>//g" <<< "$line")
        [ "$resoult" ] && INFO+=( "$resoult" )
    fi
done < $file
unset file line CONTINUE resoult
}

#----------------------#
# GET LIST OF PACKAGES #
#----------------------#
GetPackageList(){
file="$1"
PkgCount=0

while read line ; do
    if [[ $line =~ /packages/[a-z]+ ]] && [ -z "$CONTINUE" ]; then 
        CONTINUE=true
        ((PkgCount++))
        continue
    fi

    if [ "$CONTINUE" ]; then 
        if [ "$line" = "</tr>" ]; then 
            unset CONTINUE
            continue
        fi
        read resoult < <(sed "s/<[^>]*>//g" <<< "$line" )
        [ "$resoult" ] && PACKAGES[$PkgCount]+="$resoult;"
    fi
done < $file
unset file line CONTINUE resoult PkgCount
}

#-------------------------#
# DOWNLOAD SOURCE WEBPAGE #
#-------------------------#
GetSourceFile(){
pkg="${1// /+}"

[ "$pkg" ] || die "Empty Box!! what should i do with this"

PAGE=${PACGE:-?O=0&K=$pkg}

printf "%s\r" "Retrieving sources ..."
# Download source webpage
while [ "$PAGE" ]; do
    if curl -s "https://aur.archlinux.org/packages/$PAGE" --connect-timeout 5 -o $SOURCE_TMP; then 
        unset PAGE
        AmpConvert $SOURCE_TMP
        printf "%s\n" "Generate Applications list and all informations ..."
        GetSearchInfo $SOURCE_TMP
        GetPackageList $SOURCE_TMP
        PackageCheck
        NiceList
    else
        die "First of all, do you have Network?"
    fi

    [ "$(< $SOURCE_TMP)" ] || die "$pkg?!!. Did you type the name correct"
done
}

#---------------------------------#
# CHECK IF THE PACGE IN INSTALLED #
#---------------------------------#
PackageCheck(){
for num in ${!PACKAGES[@]}; do
    IFS=";" read pkg <<< "${PACKAGES[$num]}"

    pName="${pkg[0]}"

    while read ; do
        if [ "$REPLY" = "$pName" ]; then 
            PACKAGES[$num]+="[Installed]"
            break
        fi
    done < <(pacman -Qqm)
done
unset num pkg pName
}

#--------------------------#
# SHOW LIST IN A NICE FORM #
#--------------------------#
NiceList(){
for num in ${!PACKAGES[@]}; do
    IFS=";" read pkg <<< "${PACKAGES[$num]}"
    pName="${pkg[0]}"
    pVersion="${pkg[1]}"
    pVote="${pkg[2]}"
    pPopularity="${pkg[3]}"
    pDescription="${pkg[4]}"
    pMaintainer="${pkg[5]}"
    pInstall="${pkg[6]}"

    printf "%.3d aur/%s %s (%s %s %s) %s\n  %b\n" "$num" "$pName" "$pVersion" "$pMaintainer" "$pVote" "$pPopularity" "$pInstall" "$pDescription"
done

printf "-> %s; [N]ext/[P]rev page.\n" "${INFO[*]}"
printf "-> Packages to Install (ex: 1 2 3), [Q/q]uit."
printf " --> "
read -a CHOICE

# press q to quit
[ "$CHOICE" = "Q" ] && exit 0

# press n or p for next or Prev
if [ "$CHOICE" = "N" ]; then 
    while read ; do
        if [[ $REPLY =~ Next ]]; then 
            IFS='"' read -a NEXT <<< "$REPLY"
            PAGE=${NEXT[-6]}
            break
        fi
    done < <(tail -30 $SOURCE_TMP)
elif [ "$CHOICE" = "P" ]; then 
    while read ; do
        if [[ $REPLY =~ Previous ]]; then 
            IFS='"' read -a PERV <<< "$REPLY"
            PAGE=${PERV[7]}
            break
        fi
    done < <(tail -30 $SOURCE_TMP)
else
    for num in ${CHOICE[@]}; do
        if [[ $num -ne $num ]]; then 
            error "What a Letter doing here !"
            continue
        elif [[ $num -le 0 || $num -gt ${#PACKAGES[@]} ]]; then
            error "Just like McDonald's. Pick from the menu"
            continue
        fi
        FetchInstallAur "${PACKAGES[$num]}"
    done
fi

unset pName pVersion pVote pPopularity pDescription pMaintainer pInstall NEXT PERV PAGE num 
}

#-----------------------------------#
# DOWNLOAD AND INSTALL AUR PACKAGES #
#-----------------------------------#
FetchInstallAur(){
    Pkg="$1"

    printf "%s\n" "Retrieving '$Pkg' Snapshot."
    printf "%s\n" "Downloading '$Pkg' Package ..."

    if curl -s "https://aur.archlinux.org/cgit/aur.git/snapshot/$Pkg.tar.gz" --connect-timeout 5 -o "$BAUR_CACHE/$Pkg.tar.gz"; then 
        printf "%s\n" "Extracting Sources."
        printf "%s\n" "Extracting '$Pkg' Package ..."
        tar xf $BAUR_CACHE/$Pkg.tar.gz -C $BAUR_CACHE
        cd $BAUR_CACHE/$Pkg
        makepkg -rfsi 
        cd "$OLDPWD"
    else
        die "Your Network is broken just like you"
    fi
    unset Pkg
}

#---------------------#
# REMOVE AUR PACKAGES #
#---------------------#
RemovePackages(){
    sudo pacman -Rsn ${PkgList[@]}
}

#----------------------#
# INSTALL AUR PACKAGES #
#----------------------#
InstallPackages(){
    for pkg in ${PkgList[@]}; do
        FetchInstallAur "$pkg"
    done
    unset pkg
}

#---------------------#
# UPDATE AUR PACKAGES #
#---------------------#
UpdatePkgs(){
while read -a line ; do
    PkgName="${line[0]}"
    PkgVersion="${line[1]}"

    printf "%s\n" "check for '$PkgName' New Version"
    if curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PkgName" --connect-timeout 5 -o "$SOURCE_TMP"; then 
        source "$SOURCE_TMP"
        NewVersion=$pkgver
        [ "$PkgVersion" =! "$NewVersion" ] && UPkgList+=( "$PkgName" )
    else
        die "Network slow as a snale"
    fi
done < (pacman -Qm)

if [ "${UPkgList[*]}" ]; then 
    printf "%b\n" "There is ( ${#UPkgList[@]} ) Rusty Packages here, do you want to update them [Y/n]"
    printf "%b" "  --> "
    read -N1 CHOICE
    if [ "$CHOICE" = "Y" ]; then
        for item in ${UPkgList[@]}; do
            FetchInstallAur "$item"
        done
    fi
fi
}

#-------------------#
# SHOW PACKAGE INFO #
#-------------------#
ShowPkgInfo(){
pkg="$1"
cnt=0

[ "$pkg" ] || die "Empty Box!! what should i do with this ?!"

if curl -s "https://aur.archlinux.org/packages/$pkg" --connect-timeout 5 -o $SOURCE_TMP; then 
    while read line ; do
        [[ $line =~ pkginfo ]] && TABLE=true
        [[ $line =~ pkgdepslist ]] && DEPS=true
        
        if [ "$TABLE" ]; then 
            read resoult < <(sed "s/<[^>]*>//g" <<< $line)
            [ "$line" = "</table>" ] && unset TABLE
            [ "$line" = "</tr>" ] && ((cnt++))
            [[ "$resoult" =~ (packages|keyword|>) ]] && continue
            [ "$resoult" ] && PKGINFO[$cnt]+="$resoult "
        elif [ "$DEPS" ]; then
            read resoult < <(sed "s/<[^>]*>//g" <<< $line)
            [ "$line" = "</div>" ] && unset DEPS
            [ "$line" = "</li>" ] && PKGDEPS+=";"
            [ "$resoult" ] && PKGDEPS+="$resoult "
        fi
    done < $SOURCE_TMP
else
    die "First of all, do you have Network?"
fi

for num in ${!PKGINFO[@]}; do
    printf "%-15s: %s\n" "${PKGINFO[$num]%%:*}" "${PKGINFO[$num]#*:}"
done

printf "%-15s:\n" "Dependencies"
IFS=';' read -a DEPSLIST <<< $PKGDEPS
printf "\t%s\n" "${DEPSLIST[@]}" 

unset line TABLE DEPS cnt PKGINFO PKGDEPS num DEPSLIST
}

#-------------#
# HELP DIALOG #
#-------------#
HelpDialog(){
while read ; do
    printf "%s\n" "$REPLY"
done <<-HELP
${name^^}_$Version: Arch User Repository in Pure Bash
USAGE: $name [OPTIONS] ... [Pkgs]

OPTIONS:
    -s <Pkg>    Search for giving Package
    -S <Pkgs>   Install Giving Packages
    -R <Pkgs>   Remove Giving Packages
    -U          Update All AUR Packages
    -i <Pkg>    Show Pkg information
    -h          Show this help dialog
    -v          Display version information and exit

HELP
}

#---------------#
# MAIN FUNCTION #
#---------------#
MainFunc(){
while [ "$1" ]; do
    case "$1" in
        -s ) options[s]=true
            if ! [[ "$2" =~ ^-[sSRUihv]$ ]]; then 
                SEARCH="$2"
                shift
            fi
            shift
            ;;
        -S ) options[S]=true 
            until [[ "$2" =~ ^-[sSRUihv]$ ]] || [ -z "$2" ]; do
                PkgList+=( "$2" )
                shift
            done
            shift
            ;;
        -R ) options[R]=true
            until [[ "$2" =~ ^-[sSRUihv]$ ]] || [ -z "$2" ]; do
                PkgList+=( "$2" )
                shift
            done
            shift
            ;;
        -U ) options[U]=true
            ;;
        -i ) options[i]=true
            if ! [[ "$2" =~ ^-[sSRUihv]$ ]]; then 
                SEARCH="$2"
                shift
            fi
            shift
            ;;
        -h ) options[h]=true ;;
        -v ) options[v]=true ;;
        * ) die "What is this -- '$1'. Did you need help.";;
    esac
    shift
done
}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#
MainFunc "$@"

#------------------#
# RUN USER OPTIONS #
#------------------#
[ -z "${options[s]}" ] ||
[ -z "${options[S]}" ] || InstallPackages
[ -z "${options[R]}" ] || RemovePackages
[ -z "${options[U]}" ] || UpdatePkgs
[ -z "${options[i]}" ] || ShowPkgInfo "$SEARCH"
[ -z "${options[h]}" ] || HelpDialog
[ -z "${options[v]}" ] || printf "%s: %s\n" "${name^}" "Version ($Version)" 

# remove temp file
rm -f $SOURCE_TMP
