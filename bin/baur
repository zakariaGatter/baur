#!/usr/bin/env bash

#-------------#
# SCRIPT NAME #
#-------------#
declare -r name=${0##*/}
declare -r Version="0.1.0"

#---------------------#
# ENABLE BASH OPTIONS #
#---------------------#
shopt -s dotglob extglob nullglob

#------------------#
# GENERAL VARIABLE #
#------------------#
declare -A PACKAGES
declare -A options
declare -u CHOICE # make variable upper case

#-----------------#
# COLOR VARIABLES #
#-----------------#
Coff='\e[0m'
Cred='\e[1;31m'
Cgreen='\e[1;32m'
Cyellow='\e[1;33m'
Cblue='\e[1;34m'
Cmagenta='\e[1;35m'
Ccyan='\e[1;36m'
Cwhite='\e[1;37m'

#-------------------#
# CACHE VARIABLES #
#-------------------#
[ "$BAUR_CACHE" ] || BAUR_CACHE="${XDG_CACHE_DIR:-$HOME/.cache}/$name"

#--------------------#
# MAKE CACHE FOLDERS #
#--------------------#
[ -d "$BAUR_CACHE" ] || mkdir -p "$BAUR_CACHE"

#--------------------#
# TEMP FILE VARIALES #
#--------------------#
read SOURCE_TMP< <(mktemp -q /tmp/${name}.XXX)

#--------------#
# EXIT MESSAGE #
#--------------#
die(){
    printf "%s: %b\n" "${name^}" "$@" >&2
    rm -f $SOURCE_TMP
    exit 2
}

#---------------#
# ERROR MESSAGE #
#---------------#
error(){
    printf "${Cred}==> ERROR:${Cwhite} %b${Coff}\n" "$@" >&2
}

#---------------#
# GREEN MESSAGE #
#---------------#
gmsg(){
    printf "${Cgreen}==>${Cwhite} %b${Coff}\n" "$@"
}

#--------------#
# BLUE MESSAGE #
#--------------#
bmsg(){
    printf "$Cblue  ->${Cwhite} %b${Coff}\n" "$@"
}

#------------------#
# BLUE DOT MESSAGE #
#------------------#
bdot(){
    printf "${Cblue}::${Cwhite} %b${Coff}" "$@"
}

#-----------------------#
# CONVERT HTML AMP CHAR #
#-----------------------#
AmpConvert(){
amp_char=( "&quot;" "&amp;" "&#39;" "&lt;" "&gt;" )
nor_char=( '"' '&' "'" '<' '>' )
file="$1"
for num in ${!amp_char[@]}; do
    sed -i "s/${amp_char[$num]}/\\${nor_char[$num]}/g" $file
done

unset amp_char nor_char file num
}

#------------------------#
# GET SEARCH INFORMATION #
#------------------------#
GetSearchInfo(){
file="$1"
unset INFO

while read line ; do
    if [[ $line =~ "pkglist-stats" ]] && [ -z "$CONTINUE" ]; then
        CONTINUE=true
        continue
    elif [ "$CONTINUE" ]; then
        [ "$line" = "</p>" ] && break
        read resoult < <(sed "s/<[^>]*>//g" <<< "$line")
        [ "$resoult" ] && INFO+=( "$resoult" )
    fi
done < $file
unset file line CONTINUE resoult
}

#----------------------#
# GET LIST OF PACKAGES #
#----------------------#
GetPackageList(){
file="$1"
declare -i PkgCount=0
unset PACKAGES

# map file to array
mapfile -t -s 460 -n 1310 LPKG < $file

while read line ; do
    if [[ $line =~ /packages/[a-zA-Z0-9]+ ]]; then
        CONTINUE=true
        ((PkgCount++))
    elif [ "$CONTINUE" ]; then
        if [ "$line" = "</tr>" ]; then
            unset CONTINUE
        else
            read resoult < <(sed "s/<[^>]*>//g" <<< "$line" )
            [ "$resoult" ] && PACKAGES[$PkgCount]+="$resoult;"
        fi
    fi
done < <(printf "%s\n" "${LPKG[@]}")
unset file line CONTINUE resoult PkgCount
}

#-------------------------#
# DOWNLOAD SOURCE WEBPAGE #
#-------------------------#
GetSourceFile(){
pkg="${1// /+}"

[ "$pkg" ] || die "Empty Box!! what should i do with this"

PAGE=${PAGE:-/packages?O=0&K=$pkg}

bdot "Retrieving sources ...\r"
# Download source webpage
while [ "$PAGE" ]; do
    if curl -s "https://aur.archlinux.org$PAGE" --connect-timeout 5 -o $SOURCE_TMP; then
        unset PAGE
        AmpConvert $SOURCE_TMP
        bdot "Get Search informations ...\r"
        GetSearchInfo $SOURCE_TMP
        bdot "Get Packages List from source ...\r"
        GetPackageList $SOURCE_TMP
        PackageCheck
        NiceList
        UserPick
    else
        die "First of all, do you have Network?"
    fi

    printf "%*s" "$COLUMNS"
    [ "$(< $SOURCE_TMP)" ] || die "'$pkg' Did you type the name correct"
done
}

#---------------------------------#
# CHECK IF THE PACGE IN INSTALLED #
#---------------------------------#
PackageCheck(){
for num in ${!PACKAGES[@]}; do
    IFS=";" read -a pkg <<< "${PACKAGES[$num]}"
    (pacman -Qqm ${pkg[0]} &> /dev/null) && PACKAGES[$num]+="[Installed]"
done
unset num pkg
}

#--------------------------#
# SHOW LIST IN A NICE FORM #
#--------------------------#
NiceList(){
for (( num=1; num<=${#PACKAGES[@]}; num++ )); do
    IFS=";" read -a pkg <<< "${PACKAGES[$num]}"
    pName="${pkg[0]}"
    pVersion="${pkg[1]}"
    pVote="${pkg[2]}"
    pPopularity="${pkg[3]}"
    pDescription="${pkg[4]}"
    pMaintainer="${pkg[5]}"
    pInstall="${pkg[6]}"

    printf "${Cwhite}%.3d ${Ccyan}aur/${Cwhite}%s ${Cgreen}%s ${Cyellow}(%s %s %s)${Cred} %s${Coff}\n  %b\n\n" \
        "$num" \
        "$pName" \
        "$pVersion" \
        "$pMaintainer" "$pVote" "$pPopularity" \
        "$pInstall" \
        "$pDescription"
done
}

#--------------------#
# USER SELECT PROMPT #
#--------------------#
UserPick(){
while true ; do
printf "${Cblue}::$Coff %s ${Ccyan}[N]ext/[P]rev${Coff} page, ${Cgreen}[R]efresh${Coff}\n" "${INFO[*]}"
printf "${Cblue}::$Coff Packages to Install (ex: 1 2 3), ${Cred}[Q/q]uit.${Coff}\n"
printf "${Cblue}::$Coff "
read CHOICE

# press q to quit
[ "$CHOICE" = "Q" ] && { rm -f $SOURCE_TMP; exit 0; }

# press n or p for next or Prev
if [ "$CHOICE" = "N" ]; then
    while read ; do
        if [[ $REPLY =~ Next ]]; then
            IFS='"' read -a NEXT <<< "$REPLY"
            PAGE="${NEXT[-6]}"
            break 2
        fi
    done< <(tail -30 $SOURCE_TMP)
elif [ "$CHOICE" = "P" ]; then
    while read ; do
        if [[ $REPLY =~ Previous ]]; then
            IFS='"' read -a PERV <<< "$REPLY"
            PAGE="${PERV[7]}"
            break 2
        fi
    done < <(tail -30 $SOURCE_TMP)
elif [ "$CHOICE" = "R" ]; then
    NiceList
else
    for num in ${CHOICE[@]}; do
        if (( num <= 0 || num > ${#PACKAGES[@]} )); then
            error "Just like McDonald's. Pick from the menu"
            continue
        fi
        FetchInstallAur "${PACKAGES[$num]}"
    done
fi
done

unset pName pVersion pVote pPopularity pDescription pMaintainer pInstall NEXT PERV num
}

#-----------------------------------#
# DOWNLOAD AND INSTALL AUR PACKAGES #
#-----------------------------------#
FetchInstallAur(){
    Pkg="$1"

    gmsg "Retrieving Source."
    bmsg "Downloading '$Pkg' Package ..."

    if curl -s "https://aur.archlinux.org/cgit/aur.git/snapshot/$Pkg.tar.gz" --connect-timeout 5 -o "$BAUR_CACHE/$Pkg.tar.gz"; then
        gmsg "Extracting '$Pkg' Package ..."
        bmsg "Creating Working '$Pkg' Package folder ..."
        tar xf $BAUR_CACHE/$Pkg.tar.gz -C $BAUR_CACHE
        cd $BAUR_CACHE/$Pkg
        makepkg -rfsi
        cd "$OLDPWD"
        rm -rf "$BAUR_CACHE/$Pkg.tar.gz" "$BAUR_CACHE/$Pkg"
    else
        die "Your Network is broken just like you"
    fi
    unset Pkg
}

#---------------------#
# REMOVE AUR PACKAGES #
#---------------------#
RemovePackages(){
    sudo pacman -Rsn ${PkgList[@]}
}

#----------------------#
# INSTALL AUR PACKAGES #
#----------------------#
InstallPackages(){
    for pkg in ${PkgList[@]}; do
        FetchInstallAur "$pkg"
    done
    unset pkg
}

#---------------------#
# UPDATE AUR PACKAGES #
#---------------------#
UpdatePkgs(){
while read -a line ; do
    PkgName="${line[0]}"
    PkgVersion="${line[1]}"

    bdor "Retrieving Source...\r"
    bdot "Check for '$PkgName' New Version.\r"
    if curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PkgName" --connect-timeout 5 -o "$SOURCE_TMP"; then
        source "$SOURCE_TMP"
        NewVersion=$pkgver
        [ "$PkgVersion" =! "$NewVersion" ] && PkgToUpdate+=( "$PkgName Old(${Cred}$PkgVersion${Coff}) -> New(${Cgreen}$NewVersion${Coff})" )
    else
        die "Network slow as a snale"
    fi
done < <(pacman -Qm)

if [ "${PkgToUpdate[*]}" ]; then
    gmsg "Packages to update ..."
    for item in ${PkgToUpdate[@]}; { bmsg "$item" ;}
    printf "${Cblue}::${Coff} There is (${Cred} %.3d ${Coff}) Rusty Packages here, do you want to update them ${Cgreen}[Y/n]${Coff}\n" "${#PkgToUpdate[@]}"
    printf "${Cblue}::${Coff} "
    read CHOICE
    if [ "$CHOICE" = "Y" ]; then
        for item in ${PkgToUpdate[@]}; do
            read -a pkg <<< "$item"
            FetchInstallAur "${pkg[0]}"
        done
    fi
fi
unset line PkgName PkgVersion NewVersion PkgToUpdate item pkg
}

#-------------------#
# SHOW PACKAGE INFO #
#-------------------#
ShowPkgInfo(){
pkg="$1"
cnt=0

[ "$pkg" ] || die "Empty Box!! what should i do with this ?!"

if curl -s "https://aur.archlinux.org/packages/$pkg" --connect-timeout 5 -o $SOURCE_TMP; then
    while read line ; do
        [[ $line =~ pkginfo ]] && TABLE=true
        [[ $line =~ pkgdepslist ]] && DEPS=true
      
        if [ "$TABLE" ]; then
            read resoult < <(sed "s/<[^>]*>//g" <<< $line)
            [ "$line" = "</table>" ] && unset TABLE
            [ "$line" = "</tr>" ] && ((cnt++))
            [[ "$resoult" =~ (packages|keyword|>) ]] && continue
            [ "$resoult" ] && PKGINFO[$cnt]+="$resoult "
        elif [ "$DEPS" ]; then
            read resoult < <(sed "s/<[^>]*>//g" <<< $line)
            [ "$line" = "</div>" ] && unset DEPS
            [ "$line" = "</li>" ] && PKGDEPS+=";"
            [ "$resoult" ] && PKGDEPS+="$resoult "
        fi
    done < $SOURCE_TMP
else
    die "First of all, do you have Network?"
fi

for num in ${!PKGINFO[@]}; do
    printf "${Cwhite}%-15s:${Coff} %s\n" "${PKGINFO[$num]%%:*}" "${PKGINFO[$num]#*:}"
done

printf "${Cwhite}%-15s:${Coff} \n" "Dependencies"
IFS=';' read -a DEPSLIST <<< $PKGDEPS
printf "\t%s\n" "${DEPSLIST[@]}"

unset line TABLE DEPS cnt PKGINFO PKGDEPS num DEPSLIST
}

#-------------#
# HELP DIALOG #
#-------------#
HelpDialog(){
while read ; do
    printf "%s\n" "$REPLY"
done <<-HELP
${name^^}_$Version: Arch User Repository in Pure Bash
USAGE: $name [OPTIONS] ... [Pkgs]

OPTIONS:
    -s <Pkg>    Search for giving Package
    -S <Pkgs>   Install Giving Packages
    -R <Pkgs>   Remove Giving Packages
    -U          Update All AUR Packages
    -i <Pkg>    Show Pkg information
    -h          Show this help dialog
    -v          Display version information

HELP
}

#---------------#
# MAIN FUNCTION #
#---------------#
MainFunc(){
OPTIONS="sSRUihv"
while [ "$1" ]; do
    case "$1" in
        -s ) options[s]=true
            if ! [[ "$2" =~ ^-[$OPTIONS]$ ]]; then
                SEARCH="$2"
                shift
            fi
            shift
            ;;
        -S ) options[S]=true
            until [[ "$2" =~ ^-[$OPTIONS]$ ]] || [ -z "$2" ]; do
                PkgList+=( "$2" )
                shift
            done
            shift
            ;;
        -R ) options[R]=true
            until [[ "$2" =~ ^-[$OPTIONS]$ ]] || [ -z "$2" ]; do
                PkgList+=( "$2" )
                shift
            done
            shift
            ;;
        -U ) options[U]=true
            ;;
        -i ) options[i]=true
            if ! [[ "$2" =~ ^-[$OPTIONS]$ ]]; then
                SEARCH="$2"
                shift
            fi
            shift
            ;;
        -c ) options[c]=true ;;
        -h ) options[h]=true ;;
        -v ) options[v]=true ;;
        * ) die "What is this -- '$1'. Did you need help.";;
    esac
    shift
done
}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#
MainFunc "$@"

#------------------#
# RUN USER OPTIONS #
#------------------#
[ -z "${options[s]}" ] || GetSourceFile "$SEARCH"
[ -z "${options[S]}" ] || InstallPackages
[ -z "${options[R]}" ] || RemovePackages
[ -z "${options[U]}" ] || UpdatePkgs
[ -z "${options[i]}" ] || ShowPkgInfo "$SEARCH"
[ -z "${options[c]}" ] || CleanCache
[ -z "${options[h]}" ] || HelpDialog
[ -z "${options[v]}" ] || printf "%s: %s\n" "${name^}" "Version ($Version)"

# remove temp file
rm -f $SOURCE_TMP
