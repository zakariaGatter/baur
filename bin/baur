#!/usr/bin/env bash

#-------------#
# SCRIPT NAME #
#-------------#
declare -r name=${0##*/}
declare -r Version="0.1.0"

#------------------#
# GENERAL VARIABLE #
#------------------#
declare -A PACKAGES     # list of packages in search resoult
declare -A PKGINFO
declare -A FLAGGED
declare -A INSTALL      # check if the package is installed
declare -A options      # user options
declare -u CHOICE       # menu picker option make variable upper case

#---------------------#
# ENABLE BASH OPTIONS #
#---------------------#
shopt -s dotglob extglob nullglob

#-------------------#
# CACHE VARIABLES #
#-------------------#
[ "$BAUR_CACHE" ] || BAUR_CACHE="${XDG_CACHE_DIR:-$HOME/.cache}/$name"

#--------------------#
# MAKE CACHE FOLDERS #
#--------------------#
[ -d "$BAUR_CACHE" ] || mkdir -p "$BAUR_CACHE"

#--------------------#
# TEMP FILE VARIALES #
#--------------------#
# make a temp file to store the wen page source
read SOURCE_TMP< <(mktemp -q /tmp/${name}.XXX)

#--------------#
# EXIT MESSAGE #
#--------------#
die(){
    printf "%s: %b\n" "${name^}" "$@" >&2
    rm -f $SOURCE_TMP
    exit 2
}

#---------------#
# ERROR MESSAGE #
#---------------#
error(){
    printf "${Cred}==> ERROR:${Cwhite} %b${Coff}\n" "$@" >&2
}

#---------------#
# GREEN MESSAGE #
#---------------#
gmsg(){
    printf "${Cgreen}==>${Cwhite} %b${Coff}\n" "$@" >&2
}

#--------------#
# BLUE MESSAGE #
#--------------#
bmsg(){
    printf "$Cblue  ->${Cwhite} %b${Coff}\n" "$@" >&2
}

#------------------#
# BLUE DOT MESSAGE #
#------------------#
bdot(){
    printf "${Cblue}::${Cwhite} %b${Coff}" "$@" >&2
}

#-----------------------#
# CONVERT HTML AMP CHAR #
#-----------------------#
# replace special char from HTML to normal char instead of using a external application
AmpConvert(){
amp_char=( "&quot;" "&amp;" "&#39;" "&lt;" "&gt;" )
nor_char=( '"' '&' "'" '<' '>' )
file="$1"
for number in ${!amp_char[@]}; do
    sed -i "s/${amp_char[$number]}/\\${nor_char[$number]}/g" $file
done

unset amp_char nor_char file number
}

#----------------------------------#
# GET INFORMATION FROM SOURCE PAGE #
#----------------------------------#
GetInformation(){
count=0

while read line; do
    [ "$line" ] || continue
    [[ $line =~ pkglist-stats ]] && StatsBegin=true
    [[ $line =~ pkglist-nav ]] && NextBegin=true
    [ "$line" = "<tbody>" ] && ListBegin=true

    if [ "$StatsBegin" ]; then
        if [ "$line" = "</p>" ]; then
            unset StatsBegin
        else
            read resoult < <(sed "s/<[^>]*>//g" <<< $line)
            [ "$result" ] && STATUS+="$result "
        fi
    elif [ "$NextBegin" ]; then
        if [[ $line =~ Next ]] || [[ $line =~ Previous ]]; then
            IFS='"' read -a resoult <<< $line
            for ((i=0; i<=${#resoult[@]}; i++)); do
                if [[ $i =~ Next ]]; then
                    NextPage="${resoult[$i - 1]}"
                elif [[ $i =~ Previous ]]; then
                    PrevPage="${resoult[$i - 1]}"
                fi
            done
            unset NextBegin
        fi
    elif [ "$ListBegin" ]; then
        [ "$line" = "</table>" ] && break
        [ "$line" = "<tr>" ] && ((count++))

        [[ $line =~ flagged ]] && FLAGGED[$count]="[Out-Of-Date]"

        read resoult < <(sed "s/<[^>]*>//g" <<< $line)
        if [ -z "${PACKAGES[$count]}" ]; then
            [ "$resoult" ] && PACKAGES[$count]="$resoult"
            (pacman -Qqm ${PACKAGES[$count]} &> /dev/null) && INSTALL[$count]+="[Installed]"
        else
            [ "$resoult" ] && eval "${PACKAGES[$count]//-/_}+=( '$resoult' )"
        fi
    fi
done < "$1"
unset resoult count
}

#-------------------------#
# DOWNLOAD SOURCE WEBPAGE #
#-------------------------#
GetSourceFile(){
PAGE=${PAGE:-/packages?O=0&K=${1// /+}}
bdot "Retrieving sources ...\r"

# check if there is any packages founded
[ "${PACKAGES[*]}" ] || die "'$pkg' Did you type the name correctly."

# Download source webpage
while [ "$PAGE" ]; do
    if curl -s "https://aur.archlinux.org$PAGE" --connect-timeout 5 -o $SOURCE_TMP; then
        unset PAGE
        AmpConvert "$SOURCE_TMP"
        bdot "Get Search information ...\r"
        GetInformation "$SOURCE_TMP"
        UserPick
    else
        die "First of all, do you have Network?"
    fi
done
}

#--------------------------#
# SHOW LIST IN A NICE FORM #
#--------------------------#
NiceList(){
# print package and there information
for (( num=1; num<=${#PACKAGES[@]}; num++ )); do
    read -a pkg < <(eval "echo \${${PACKAGES[$num]//-/_}[@]}")
    pName="${PACKAGES[$num]//_/-}"
    pVersion="${pkg[0]}"
    pVote="${pkg[1]}"
    pPopularity="${pkg[2]}"
    pDescription="${pkg[3]}"
    pMaintainer="${pkg[4]}"
    pFlagged="${FLAGGED[$num]}"
    pInstall="${INSTALL[$num]}"

    printf "${Cwhite}%.3d ${Ccyan}aur/${Cwhite}%s ${Cgreen}%s ${Cyellow}(%s %s %s)${Cred} %s%s${Coff}\n  %b\n\n" \
        "$num" \
        "$pName" \
        "$pVersion" \
        "$pMaintainer" "$pVote" "$pPopularity" \
        "$pFlagged" \
        "$pInstall" \
        "$pDescription"
done
}

#--------------------#
# USER SELECT PROMPT #
#--------------------#
UserPick(){
while true ; do
    clear
    PackageCheck
    NiceList
printf "${Cblue}::$Coff %s ${Ccyan}[N]ext/[P]rev${Coff} page.\n" "${INFO[*]}"
printf "${Cblue}::$Coff Packages to Install (ex: 1 2 3), ${Cred}[Q/q]uit.${Coff}\n"
printf "${Cblue}::$Coff "
read CHOICE

# press q to quit
[ "$CHOICE" = "Q" ] && { rm -f $SOURCE_TMP; exit 0; }

# press n or p for next or Prev
if [ "$CHOICE" = "N" ]; then
    PAGE="$NextPage"
elif [ "$CHOICE" = "P" ]; then
    PAGE="$PrevPage"
else
    for number in ${CHOICE[@]}; do
        if (( number <= 0 || number > ${#PACKAGES[@]} )); then
            error "Just like McDonald's. Pick from the menu"
            continue
        fi
        FetchInstallAur "${PACKAGES[$number]%%;*}"
    done
fi
done

unset pName pVersion pVote pPopularity pDescription pMaintainer pInstall NEXT PERV number
}

#-----------------------------------#
# DOWNLOAD AND INSTALL AUR PACKAGES #
#-----------------------------------#
# download snapshot tarball
# decompress tarball
# change dir to package folder
# make package and install it
# change dir back to old path
# remove package cache
FetchInstallAur(){
    Pkg="$1"

    gmsg "Retrieving Source."
    bmsg "Downloading '$Pkg' Package ..."

    if curl -s "https://aur.archlinux.org/cgit/aur.git/snapshot/$Pkg.tar.gz" --connect-timeout 5 -o "$BAUR_CACHE/$Pkg.tar.gz"; then
        gmsg "Extracting '$Pkg' Package ..."
        bmsg "Creating Working '$Pkg' Package folder ..."
        tar xf $BAUR_CACHE/$Pkg.tar.gz -C $BAUR_CACHE
        cd $BAUR_CACHE/$Pkg
        makepkg $NC_MAKEPKG -rfsi
        cd "$OLDPWD"
        rm -rf "$BAUR_CACHE/$Pkg.tar.gz" "$BAUR_CACHE/$Pkg"
    else
        die "Your Network is broken just like you"
    fi
    unset Pkg
}

#---------------------#
# REMOVE AUR PACKAGES #
#---------------------#
# a simple command do remove aur packages from your system
RemovePackages(){
    sudo pacman $NC_PACMAN -Rsn ${PkgList[@]}
}

#----------------------#
# INSTALL AUR PACKAGES #
#----------------------#
# loop through all giving packages in '-S' option and install them
InstallPackages(){
    for pkg in ${PkgList[@]}; do
        FetchInstallAur "$pkg"
    done
    unset pkg
}

#---------------------#
# UPDATE AUR PACKAGES #
#---------------------#
UpdatePkgs(){
while read -a line ; do
    PkgName="${line[0]}"
    PkgVersion="${line[1]}"
    NPkgVersion=${PkgVersion%.*}
    NPkgVersion=${NPkgVersion//[[:alpha:]-\.+_]}

    if curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PkgName" --connect-timeout 5 -o "$SOURCE_TMP"; then
        source "$SOURCE_TMP" 2> /dev/null || {
            [ "${options[q]}" ] || bdot "Check for '$PkgName' Local Install.\n"
            continue
        }
        NewVersion=$pkgver
        NNewVersion=${NewVersion%.*}
        NNewVersion=${NNewVersion//[[:alpha:]-\.+_]}
        [ "$NPkgVersion" -lt "$NNewVersion" ] && PkgToUpdate+=( "$PkgName ${Coff}Old(${Cred}$PkgVersion${Coff}) -> New(${Cgreen}$NewVersion${Coff})" )
        [ "${options[q]}" ] || bdot "Check for '$PkgName' New Version.\n"
    else
        die "Network slow as a snale"
    fi
done < <(pacman -Qm)

if [ "${PkgToUpdate[*]}" ]; then
    gmsg "Packages to update ..."
    for item in "${PkgToUpdate[@]}"; { bmsg "$item" ;}
    printf "${Cblue}::${Coff} There is (${Cred} %.3d ${Coff}) Rusty Packages here, do you want to update them ${Cgreen}[Y/n]${Coff}\n" "${#PkgToUpdate[@]}"
    printf "${Cblue}::${Coff} "
    read CHOICE
    if [ "$CHOICE" = "Y" ]; then
        for item in "${PkgToUpdate[@]}"; do
            FetchInstallAur "${item%% *}"
        done
    fi
fi
unset line PkgName PkgVersion NewVersion PkgToUpdate item pkg
}

#-------------------#
# SHOW PACKAGE INFO #
#-------------------#
ShowPkgInfo(){
pkg="$1"
count=0

if curl -s "https://aur.archlinux.org/packages/$pkg" --connect-timeout 5 -o $SOURCE_TMP; then
    while read line ; do
        [[ $line =~ pkginfo ]] && TABLE=true
        [[ $line =~ pkgdepslist ]] && DEPS=true

        if [ "$TABLE" ]; then
            if [ "$line" = "</table>" ]; then
                unset TABLE
            elif [ "$line" = "</tr>" ]; then
                ((count++))
            else
                read resoult < <(sed "s/<[^>]*>//g" <<< $line)
                [[ "$resoult" =~ (packages|keyword|>) ]] && continue
                [ "$resoult" ] && PKGINFO[$count]+="$resoult "
            fi
        elif [ "$DEPS" ]; then
            if [ "$line" = "</div>" ];then
                unset DEPS
            elif [ "$line" = "</li>" ]; then
                PKGDEPS+=";"
            else
                read resoult < <(sed "s/<[^>]*>//g" <<< $line)
                [ "$resoult" ] && PKGDEPS+="$resoult "
            fi
        fi
    done < $SOURCE_TMP
else
    die "First of all, do you have Network?"
fi

for number in ${!PKGINFO[@]}; do
    printf "${Cwhite}%-15s:${Coff} %s\n" "${PKGINFO[$number]%%:*}" "${PKGINFO[$number]#*:}"
done

printf "${Cwhite}%-15s:${Coff} \n" "Dependencies"
IFS=';' read -a DEPSLIST <<< $PKGDEPS
printf "\t%s\n" "${DEPSLIST[@]}"

unset line TABLE DEPS count PKGINFO PKGDEPS number DEPSLIST
}

#-------------#
# HELP DIALOG #
#-------------#
HelpDialog(){
while read ; do
    printf "%s\n" "$REPLY"
done <<-HELP
${name^^}_$Version: Arch User Repository in Pure Bash
USAGE: $name [OPTIONS] ... [Pkgs]

OPTIONS:
    -s <Pkg>    Search for giving Package
    -S <Pkgs>   Install Giving Packages
    -R <Pkgs>   Remove Giving Packages
    -U          Update All AUR Packages
    -q          Shwo no information when update
    -i <Pkg>    Show Pkg information
    -c          Disable coloring
    -h          Show this help dialog
    -v          Display version information

HELP
}

#---------------#
# MAIN FUNCTION #
#---------------#
MainFunc(){
while getopts ':s:S:R:i:Uchv' OPT ; do
    case "$OPT" in
        s ) options[s]=true
            SEARCH="$OPTARG"
            ;;
        S ) options[S]=true
            until [ -z "$2" ] || [[ $2 =~ ^-.$ ]]; do
                PkgList+=( "$2" )
                shift
            done
            ;;
        R ) options[R]=true
            until [ -z "$2" ] || [[ $2 =~ ^-.$ ]]; do
                PkgList+=( "$2" )
                shift
            done
            ;;
        q ) options[q]=true ;;
        i ) options[i]=true
            SEARCH="$OPTARG"
            ;;
        U ) options[U]=true ;;
        c ) options[c]=true ;;
        h ) options[h]=true ;;
        v ) options[v]=true ;;
        : ) die "Empty Box!! What should i do with this." ;;
        * ) die "There no one with this name '-$OPTARG' lives here.\nAsk '$name -h'." ;;
    esac
done
}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#
MainFunc "$@"

#-----------------#
# COLOR VARIABLES #
#-----------------#
Coff='\e[0m'
Cred='\e[1;31m'
Cgreen='\e[1;32m'
Cyellow='\e[1;33m'
Cblue='\e[1;34m'
Cmagenta='\e[1;35m'
Ccyan='\e[1;36m'
Cwhite='\e[1;37m'

#-------------------#
# C OPTION NO COLOR #
#-------------------#
if [ "${options[c]}" ]; then
    unset Coff Cred Cgreen Cyellow Cblue Cmagenta Ccyan Cwhite
    declare -r NC_MAKEPKG="-m"
    declare -r NC_PACMAN="--color=never"
fi

#------------------#
# RUN USER OPTIONS #
#------------------#
[ -z "${options[s]}" ] || GetSourceFile "$SEARCH"
[ -z "${options[S]}" ] || InstallPackages
[ -z "${options[R]}" ] || RemovePackages
[ -z "${options[U]}" ] || UpdatePkgs
[ -z "${options[i]}" ] || ShowPkgInfo "$SEARCH"
[ -z "${options[h]}" ] || HelpDialog
[ -z "${options[v]}" ] || printf "%s: %s\n" "${name^}" "Version ($Version)"

# remove temp file
rm -f $SOURCE_TMP
