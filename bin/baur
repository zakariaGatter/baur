#!/usr/bin/env bash

#-------#
# NOTES #
#-------#

#----------#
# PACKAGES #
#----------#
# curl, awk, grep, tar, makepkg, pacman, coreutils

#-------#
# DEBUG #
#-------#{{{
#set -x
#}}}

#------#
# NAME #
#------#{{{
_name_=${0##*/}
#}}}

#------------#
# ERRRRR MSG #
#------------#{{{
_em_(){ (>&2 echo -e "${_name_^}: $@") && exit 1 ;}
#}}}

#------------#
# JUST A MSG #
#------------#{{{
_msg_(){ echo -e "${_name_^}: $@" ;}
#}}}

#-----------#
# ERROW MSG #
#-----------#{{{
g_er(){ echo -e "${Bold}${Green}==>${Reset} $@ " ${Reset};}
b_er(){ echo -e "${Bold}  ${Blue}-->${Reset} $@ ${Reset}" ;}
r_er(){ echo -e "${Bold}${Red}==> ERROR:${Reset} $@ " && exit 1 ;}
#}}}

#--------#
# COLORS #
#--------#{{{
 Reset=$(tput sgr0)     # Text Reset
# Regular Colors
 Black=$(tput setaf 0)  # Black
   Red=$(tput setaf 1)  # Red
 Green=$(tput setaf 2)  # Green
Yellow=$(tput setaf 3)  # Yellow
  Blue=$(tput setaf 4)  # Blue
Purple=$(tput setaf 5)  # Purple
  Cyan=$(tput setaf 6)  # Cyan
 White=$(tput setaf 7)  # White
  Bold=$(tput bold)     # Bold
#}}}

#--------------------------------#
# CONVERT HTML AMP CHARS TO TEXT #
#--------------------------------#{{{
_amp_(){
local _amp_char_=( "&quot;" "&amp;" "&#039;" "&lt;" "&gt;" )
local _nor_char_=( '"' '&' "'" '<' '>' )
local _file_="$1"

for i in ${!_amp_char_[@]} ; do
    sed -i "s/${_amp_char_[$i]}/\\${_nor_char_[$i]}/g" "$_file_"
done
}
#}}}

#------------------------------------#
# GET LIST OF RESOULT IN NICE FORMAT #
#------------------------------------#{{{
_list_(){
# clean search list
[ "$_BAUR_SEARCH_" ] || :> "$_CACHE_SEARCH_"

# get list of search result (try to find a way better then use awk)
awk '/<td><a href="\/packages\//{
	gsub(/<[^>]*>/,"",$0)
	gsub(/^[[:space:]]*/,"",$0)
	printf "%s", $0

	for(i=0;i<4;i++){
		getline
		gsub(/<[^>]*>/,"",$0)
		gsub(/^[[:space:]]*/," ",$0)
		printf "%s", $0
	}

	print ""
}' "$_CACHE_SOURCE_" > "$_CACHE_SEARCH_"
}
#}}}

#------------------------------#
# GET PACKAGES NUMBER AND PAGE #
#------------------------------#{{{
_packages_(){
awk '/^[[:space:]]*<div class="pkglist-stats">/,/<\/div>/{
    if($2 == "packages"){
        for(i=1;i<=7;i++){ printf "%s ", $i }
    }
}' "$_CACHE_SOURCE_"
}
#}}}

#--------------------------#
# DOWNLOAD SOURCE PAGE WEB #
#--------------------------#{{{
_source_(){
#if no package giving
[ "$1" ] || [ "$_PAGE_" ] || r_er "Nothing to look for"

# simple wait msg
g_er "Retrieving sources ..."

# get package name
local _pkg_=${1// /+}

# get search by string
local _link_=$(_search_by_ "$_pkg_")

# get items per page
[ "$_BAUR_PER_" ] && {
    b_er "Count Item List ..."
    (( _BAUR_PER_ = _BAUR_PER_ )) 2> /dev/null && _per_="&PP=${_BAUR_PER_}" || _msg_ "Unvalide Number for -p Option"
}

# Download the source page
if curl -s "https://aur.archlinux.org/packages/${_PAGE_:=${_link_}}${_per_}" -o "$_CACHE_SOURCE_"; then
    b_er "Generate search link ..."
    _amp_ "$_CACHE_SOURCE_"
	_list_
    [ "$_BAUR_SEARCH_" ] && {
        while [ "$_PAGE_" ]; do
            _PAGE_=$(awk -F '"' '/^[[:space:]]*<div class="pkglist-stats">/,/<\/div>/{if($0 ~ "Next"){print $4}}' $_CACHE_SOURCE_)
            _PAGE_=${_PAGE_##*/}
            curl -s "https://aur.archlinux.org/packages/${_PAGE_}" -o "$_CACHE_SOURCE_"
            _list_
        done
    }
else
	_em_ "Fisrt of all, do You Have Network?"
fi

# if the _CACHE_SEARCH_ file is empty that mean there is no result found
[ "$(< "$_CACHE_SEARCH_")" ] || r_er "$_pkg_ ?!!. Did You type the name correct"
}
#}}}

#-----------#
# SEARCH BY #
#-----------#{{{
_search_by_(){
local _opt_=${_BAUR_BY_}
local _pkg_=${1}

[ "$_opt_" ] || { echo -e "?O=0&K=${_pkg_}" && return 0 ;}

case "${_opt_^^}" in
    ND )
        local _link="?O=0&K=${_pkg_}"
        ;;
    NO )
        local _link="?O=0&SeB=n&K=${_pkg_}"
        ;;
    PB )
        local _link="?O=0&SeB=b&K=${_pkg_}"
        ;;
    EN )
        local _link="?O=0&SeB=N&K=${_pkg_}"
        ;;
    EP )
        local _link="?O=0&SeB=B&K=${_pkg_}"
        ;;
    K )
        local _link="?O=0&SeB=k&K=${_pkg_}"
        ;;
    M )
        local _link="?O=0&SeB=m&K=${_pkg_}"
        ;;
    CM )
        local _link="?O=0&SeB=c&K=${_pkg_}"
        ;;
    MC )
        local _link="?O=0&SeB=M&K=${_pkg_}"
        ;;
    S )
        local _link="?O=0&SeB=s&K=${_pkg_}"
        ;;
    * )
        r_er "No ${_opt_} search option "
        ;;
esac

echo -e "$_link"
}
#}}}

#--------------------------------#
# CHECK IF PKG ALREADY INSTALLED #
#--------------------------------#{{{
_check_pkg_(){
local _PKG_="$1"
local Q

# just check if the package already installed
while read -r Q; do
	[ "$Q" = "$_PKG_" ] && echo -e "${Green}[Installed]${Reset}"
done< <(pacman -Qqm 2> /dev/null)
}
#}}}

#--------------------#
# SHOW RESULT NICELY #
#--------------------#{{{
_resoult_(){
while read -ra LINE ; do
	_LIST_PKG_+=( "${LINE[0]}" ) # create list of packages
	((_COUNT_++)) # create menu count

	# create menu items
	[ "$_BAUR_SEARCH_" ] || printf "%0.3d " $_COUNT_
    echo -e "${Bold}${Blue}Aur${White}/${LINE[0]} ${Yellow}${LINE[1]} ${Cyan}(${LINE[2]} ${LINE[3]}%) $(_check_pkg_ ${LINE[0]}) ${Reset}"
	echo -e "    ${LINE[@]:4}"
done < "$_CACHE_SEARCH_"

[ "$_BAUR_SEARCH_" ] || g_er "$(_packages_) ${Yellow}[N/p] page"
}
#}}}

#----------------#
# READ SELECTION #
#----------------#{{{
_selection_(){
# create a loop if you give uncorrect input
while true; do
	_resoult_
	g_er "Package to Install (ex : 1 2 3 ),${Red} [q/Q]uit"
	echo -en "${Blue}  --> ${Reset}"
    read _SELECT_

	# check for quit option
	[[ "$_SELECT_" =~ (q|Q) ]] && exit 0
	# if you press enter
	[ "$_SELECT_" ] || exit 0

    # next and prev page
    case "$_SELECT_" in
        [Nn] )
            _PAGE_=$(awk -F '"' '/^[[:space:]]*<div class="pkglist-stats">/,/<\/div>/{if($0 ~ "Next"){print $4}}' $_CACHE_SOURCE_)
            _PAGE_=${_PAGE_##*/}
            [ "$_PAGE_" ] && _source_
            continue
            ;;
        [Pp] )
            _PAGE_=$(awk -F '"' '/^[[:space:]]*<div class="pkglist-stats">/,/<\/div>/{if($0 ~ "Previous"){print $4}}' $_CACHE_SOURCE_)
            _PAGE_=${_PAGE_##*/}
            [ "$_PAGE_" ] && _source_
            continue
            ;;
    esac

    for i in ${_SELECT_} ; do
        (( i = i )) 2> /dev/null || _em_ "What a Lettre doing in the Selection ??"

        (( i <= 0 || i > _COUNT_ )) && _em_ "Just like McDonald's, Pick what's in the menu"

        _BAUR_SELECT_=true
    done

    [ "$_BAUR_SELECT_" ] && break
done
}
#}}}

#----------------------------#
# DOWNLOAD PKGBUILD FROM AUR #
#----------------------------#{{{
_pkgbuild_(){
[ "$_BAUR_DOWNLOAD_" ] && _CACHE_DOWNLOAD_="$PWD" || _CACHE_DOWNLOAD_="$_CACHE_/packages"

_SELECT_=( ${_SELECT_:-${@}} )

# create loop for pkgs
for i in ${_SELECT_[@]} ; do
    [ "$_BAUR_SELECT_" ] && {
        ((i--))
        local _PKG_="${_LIST_PKG_[$i]}"
    } || {
        local _PKG_="$i"
    }

	# just simple msg
    g_er "Retrieving ${_PKG_} Snapshot."
	b_er "Downloading ${_PKG_}.tar.gz ..."

    # check for _CACHE_DOWNLOAD_
    [ -d "$_CACHE_DOWNLOAD_" ] || mkdir -p "$_CACHE_DOWNLOAD_"

	# download PKGBUILD file
	if curl -s "https://aur.archlinux.org/cgit/aur.git/snapshot/$_PKG_.tar.gz" -o "$_CACHE_DOWNLOAD_/$_PKG_.tar.gz" ; then
        # check if the file is a zip or regular file
        local _type_=$(file -Lb --mime-type "$_CACHE_DOWNLOAD_/$_PKG_.tar.gz")

        [ "${_type_##*/}" = "gzip" ] || {
            rm "$_CACHE_DOWNLOAD_/$_PKG_.tar.gz"
            r_er "$_PKG_?!, what you talking about ??"
            continue
        }

        # exit if you pick -d
        [ "$_BAUR_DOWNLOAD_" ] && { b_er "$_PKG_ Just stay here, don't do anything"; continue ;}

        g_er "Extracting Sources ..."
        b_er "Extracting $_PKG_.tar.gz"
        # unpack the package
        ${TAR_CMD} ${TAR_FLG} "$_CACHE_DOWNLOAD_/$_PKG_.tar.gz" -C "$_CACHE_DOWNLOAD_"

		# go to pkg dir
		cd "$_CACHE_DOWNLOAD_/$_PKG_"

		# if u use -e edit PKGBUILD
		[ "$_BAUR_EDIT_" ] && {
            eval "${BAUR_EDITOR} PKGBUILD"
            g_er "Edit PKGBUILD file ..."
        }

        # -c option
        [ "$_BAUR_COMPILE_" ] && {
            g_er "Compile $_PKG_ Package ..."
            ${MAKEPKG_CMD} ${MAKEPKG_COM_FLG}
            cp "$_CACHE_DOWNLOAD_/$_PKG_" "$PWD"
        } || {
            g_er "Compile/Install $_PKG_ Package ..."
            ${MAKEPKG_CMD} ${MAKEPKG_INS_FLG}
        }

		# back where we were
		cd "$OLDPWD"

        # remove cache
        [ "$_BAUR_KEEP_" ] && b_er "Keep $_PKG_ in cache ..." || rm -rf "$_CACHE_DOWNLOAD_/$_PKG_"

        # copy compile file to download
        [ "$_BAUR_COMPILE_" ] && { cp -Rf "$_CACHE_DOWNLOAD_/$_PKG_" "$PWD" && b_er "Move $_PKG_ in current Directory" ;}
	else
		_em_ "Fisrt of all, do You Have Network?"
	fi
done
}
#}}}

#----------------#
# PACKAGE UPDATE #
#----------------#{{{
_update_(){
local _CACHE_UPDATE_="$_CACHE_/update"
local up _pkg_version_

g_er "Check for Packages Update"
while read -u3 -ra up ; do
	local _pkg_=${up[0]}
	local _version_=${up[1]}

    b_er "check for $_pkg_ New version ..."
    if (curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$_pkg_" -o "$_CACHE_UPDATE_"); then
        read -r _pkg_version_ < <(awk -F = '{if($1 == "pkgver"){ver=$2}; if($1 == "pkgrel"){rel=$2}}END{ printf "%s-%s\n", ver, rel}' "$_CACHE_UPDATE_")

        [ "$_version_" != "$_pkg_version_" ] && _update_list_+=( "$_pkg_" )
    else
	    _em_ "Fisrt of all, do You Have Network?"
    fi

    [ "${_update_list_[*]}" ] && {
        g_er "There is (${#_update_list_[@]}) Rusty Packages here, do you want to Update them ${Blue}[Y/n]"
        read -N1 -p "${Blue}${Bold}  --> ${Reset}" Y_N

        case "$Y_N" in
            Y|y ) _pkgbuild_ "${_update_list_[@]}" ;;
        esac
    }||{
        g_er "All is up to date"
    }

done 3< <(pacman -Qm $_pkg_)
}
#}}}

#-----------------#
# REMOVE PACKAGES #
#-----------------#{{{
_remove_(){
    sudo pacman -Rsn ${_BAUR_REMOVE_[@]}
}
#}}}

#--------------#
# GET PKG INFO #
#--------------#{{{
_info_(){
local PKG=${1}
local _CACHE_INFO_="$_CACHE_/info"

# just waiting msg
g_er "Download ${PKG} Info ..."

# Download info web page
if curl -s "https://aur.archlinux.org/packages/$PKG" -o "$_CACHE_INFO_" ; then
    # if no resoult found
    ( grep '404 - Page Not Found' "$_CACHE_INFO_" &> /dev/null ) && r_er "$PKG ?!!. Did You type the name correct"

    # get information
    _amp_ "$_CACHE_INFO_"
    awk '/<table id="pkginfo">/,/<\/table>/ {
        if($2 == "class=\"keyword\""){
            gsub(/<[^>]*>/,"",$0)
            printf "%s ", $0
            line="keyword"
            next
        }
        gsub(/<[^>]*>/,"",$0)
        gsub(/^[[:space:]]*/,"",$0)
        if(NF > 0) {
            if($NF ~ ":$"){
                if($NF == "Licenses:" && line == "keyword"){
                    printf "\n%17s ", $0
                }else{
                    printf "%17s ", $0
                }
            } else {
                printf "%s\n", $0
            }
        }
    }' "$_CACHE_INFO_"
else
    _em_ "Fisrt of all, do You Have Network?"
fi
}
#}}}

#------------------#
# CLEAN BAUR CACHE #
#------------------#{{{
_clean_(){
local Y_N
    g_er "The Mide is here, Do you want to clean you cache ?!${Green}[Y/n]"
    read -N1 -p "${Blue} --> ${Reset}" Y_N

    case "$Y_N" in
        [Y|y] ) rm -rf "$_CACHE_" ;;
    esac
}
#}}}

#----------#
# HELP MSG #
#----------#{{{
_help_dialog_(){
cat <<- HELP
${_name_^}: Bash Arch User Repository
AUR Package Manager in Bure Bash

usage : ${_name_} [OPTION]... [PACKAGE]...

[OPTION] Only short option for now
 -S PKG     Install target PKG
 -R PKG     Remove target PKG
 -u PKG     Update all AUR Packages
 -d PKG     Download PKGBUILD of PKG, nothing else
 -i PKG     Show information for PKG
 -s PKG     Search for package by matching PKG
 -b SRC     Search By Criteria (give -b option before search STRING)
 -p NUM     Number of Packages Per Page (50,100,250)
 -m         Make/Compile PKGBUILD of PKG, nothing else
 -e         Edit PKGBUILD in installation mode
 -k         Keep Complie folder in cache
 -c         Clean Baur Cache
 -h         Print help usage

[SRC] for -b option
 nd         Name, Description (default)
 no         Name Only
 pb         Package Base
 en         Exact Name
 ep         Exact Package Base
 k          Keywords
 m          Maintainer
 cm         Co-maintainer
 mc         Maintainer, Co-maintainer
 s          Submitter

[VARIABLES] change script commands
BAUR_CACHE        Directory to use for Baur Cache (\$HOME/.cache/baur)
TAR_CMD           Tar command to use (tar)
TAR_FLG           Pass arguments to Tar (xf)
MAKEPKG_CMD       Makepkg command to use (makepkg)
MAKEPKG_INS_FLG   Pass arguments to Makepkg install (-rsif)
MAKEPKG_COM_FLG   Pass arguments to Makepkg Compile (-s)
BAUR_EDITOR       Editor to use when editing PKGBUILDs (\$EDITOR)

Note :
 if you choose (-d|-m|-k) the package will be in you Current Directory

HELP

exit 0
}
#}}}

#---------------#
# MAIN FUNCTION #
#---------------#{{{
_main_(){
while getopts ":S:R:us:i:d:b:p:mcekh" OPT ; do
	case "$OPT" in
		S ) # --install
            _BAUR_INSTALL_=( "$OPTARG" )
			_BAUR_LIST_=true
            ((_BAUR_MA_++))

            #Multi package
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                _BAUR_INSTALL_+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
			;;
        R ) # --remove
            _BAUR_REMOVE_=( "$OPTARG" )
			_BAUR_LIST_=true
            ((_BAUR_MA_++))

            #Multi package
            until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                _BAUR_REMOVE_+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
            ;;
		s ) # --search
			_BAUR_SEARCH_="$OPTARG"
			_BAUR_LIST_=true
            ((_BAUR_MA_++))
			;;
        u )
            _BAUR_UPDATE_=true
			_BAUR_LIST_=true
            ((_BAUR_MA_++))
            ;;
        i ) # --info
			_BAUR_INFO_="$OPTARG"
			_BAUR_LIST_=true
            ((_BAUR_MA_++))
            ;;
		d ) # --Download
            _BAUR_DOWNLOAD_=( "$OPTARG" )
			_BAUR_LIST_=true
            ((_BAUR_MA_++))

            #Multi package
             until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
                _BAUR_DOWNLOAD_+=($(eval "echo \${$OPTIND}"))
                OPTIND=$((OPTIND + 1))
            done
			;;
        b ) # --by
            _BAUR_BY_="$OPTARG"
            ;;
        p )
            _BAUR_PER_="$OPTARG"
            ;;
        m ) # --make
            _BAUR_COMPILE_=true
            ;;
		e ) # --edit
			_BAUR_EDIT_=true
			;;
        k ) # --keep
            _BAUR_KEEP_=true
            ;;
        c ) # --clean
            _BAUR_CLEAN_=true
            _BAUR_LIST_=true
            ;;
		h ) # --help
			_help_dialog_
			;;
        : )
            _em_ "You give me nothing to looking for "
            ;;
		* ) # wrong option
			_em_ "What is that (-$OPTARG)?. Did you Read Help dialog (-h)?"
			;;
	esac
done
shift "$((OPTIND-1))"

_pkg_list_=( "$@" )
}
#}}}

#--------------------#
# EXEC MAIN FUNCTION #
#--------------------#{{{
_main_ "$@"
#}}}

#------------------#
# SCRIPT VARIABLES #
#------------------#{{{
BAUR_CACHE="$HOME/.cache/baur"
_CACHE_="$BAUR_CACHE"
_CACHE_SOURCE_="$_CACHE_/source"
_CACHE_SEARCH_="$_CACHE_/search"
TAR_CMD="tar"
TAR_FLG="xf"
MAKEPKG_CMD="makepkg"
MAKEPKG_INS_FLG="-rfsi"
MAKEPKG_COM_FLG="-s"
BAUR_EDITOR="$EDITOR"
#}}}

#----------------#
# CREATE TMP DIR #
#----------------#{{{
[ -d "$_CACHE_" ] || mkdir -p "$_CACHE_"
#}}}

#----------------------#
# RUN SELECTED OPTIONS #
#----------------------#{{{
(( _BAUR_MA_ = 1 ))     || _em_ "I have only Two Hands can't do many jobs at once (-d,-S,-s,-i,-R)"
[ "$_BAUR_INSTALL_" ]   && _pkgbuild_ "${_BAUR_INSTALL_[@]}" || true
[ "$_BAUR_REMOVE_" ]    && _remove_ "${_BAUR_REMOVE_[@]}" || true
[ "$_BAUR_UPDATE_" ]    && _update_ "${_pkg_list_[@]}" || true
[ "$_BAUR_DOWNLOAD_" ]  && _pkgbuild_ "${_BAUR_DOWNLOAD_[@]}" || true
[ "$_BAUR_INFO_" ]      && _info_ "$_BAUR_INFO_" || true
[ "$_BAUR_CLEAN_" ]     && _clean_ || true
[ "$_BAUR_LIST_" ]      && true || {
	_source_ "${_pkg_list_[@]}"
	_selection_
    _pkgbuild_
}
[ "$_BAUR_SEARCH_" ]    && {
	_source_ "$_BAUR_SEARCH_"
	_resoult_
} || true
#}}}
